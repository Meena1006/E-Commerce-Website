{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THANGA MEENA\\\\OneDrive\\\\Documents\\\\GitHub\\\\E-COMMERCE\\\\frontend\\\\src\\\\components\\\\StripePage\\\\StripePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { ShopContext } from '../../Context/ShopContext';\n\n// const { getTotalCartAmount,all_product, cartItems, removeFromCart } = useContext(ShopContext);\n\n// Load Stripe.js with your publishable key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_test_51Q0jkWP9YB5tzFF9e2VMug37nwm5DOPi9StjVfPSQFvLjMCV7Q0HmDm5PKFw3xLqOeCIr8AMrtLHdluWWNLTm6f700nkZ8CmPZ');\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n    if (error) {\n      setError(error.message);\n    } else {\n      // Send paymentMethod.id to your server to create a PaymentIntent\n      const response = await fetch('/api/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          paymentMethodId: paymentMethod.id,\n          amount: 1000,\n          currency: 'usd'\n        })\n      });\n      const {\n        clientSecret\n      } = await response.json();\n\n      // Confirm payment\n      const {\n        paymentIntent,\n        error: confirmError\n      } = await stripe.confirmCardPayment(clientSecret);\n      if (confirmError) {\n        setError(confirmError.message);\n      } else if (paymentIntent.status === 'succeeded') {\n        setSuccess(true);\n        setError(null);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Payment successful!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"DYGZq6nkkCRMg1GI4A+u/XroGT4=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nconst StripeCheckout = () => /*#__PURE__*/_jsxDEV(Elements, {\n  stripe: stripePromise,\n  children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 3\n}, this);\n_c2 = StripeCheckout;\nexport default StripeCheckout;\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"StripeCheckout\");","map":{"version":3,"names":["React","useState","useContext","loadStripe","Elements","CardElement","useStripe","useElements","ShopContext","jsxDEV","_jsxDEV","stripePromise","CheckoutForm","_s","stripe","elements","error","setError","success","setSuccess","handleSubmit","e","preventDefault","cardElement","getElement","paymentMethod","createPaymentMethod","type","card","message","response","fetch","method","headers","body","JSON","stringify","paymentMethodId","id","amount","currency","clientSecret","json","paymentIntent","confirmError","confirmCardPayment","status","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","StripeCheckout","_c2","$RefreshReg$"],"sources":["C:/Users/THANGA MEENA/OneDrive/Documents/GitHub/E-COMMERCE/frontend/src/components/StripePage/StripePage.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n\r\nimport { ShopContext } from '../../Context/ShopContext';\r\n\r\n// const { getTotalCartAmount,all_product, cartItems, removeFromCart } = useContext(ShopContext);\r\n\r\n\r\n// Load Stripe.js with your publishable key\r\nconst stripePromise = loadStripe('pk_test_51Q0jkWP9YB5tzFF9e2VMug37nwm5DOPi9StjVfPSQFvLjMCV7Q0HmDm5PKFw3xLqOeCIr8AMrtLHdluWWNLTm6f700nkZ8CmPZ');\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: cardElement,\r\n    });\r\n\r\n    if (error) {\r\n      setError(error.message);\r\n    } else {\r\n      \r\n      // Send paymentMethod.id to your server to create a PaymentIntent\r\n      const response = await fetch('/api/create-payment-intent', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ paymentMethodId: paymentMethod.id, amount: 1000, currency: 'usd' }),\r\n      });\r\n\r\n      const { clientSecret } = await response.json();\r\n      \r\n      // Confirm payment\r\n      const { paymentIntent, error: confirmError } = await stripe.confirmCardPayment(clientSecret);\r\n      \r\n      if (confirmError) {\r\n        setError(confirmError.message);\r\n      } else if (paymentIntent.status === 'succeeded') {\r\n        setSuccess(true);\r\n        setError(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <CardElement />\r\n      <button type=\"submit\" disabled={!stripe}>\r\n        Pay\r\n      </button>\r\n      {error && <div>{error}</div>}\r\n      {success && <div>Payment successful!</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst StripeCheckout = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default StripeCheckout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}